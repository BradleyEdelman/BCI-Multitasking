function handles = c_meshROI_plot(varargin)
p = inputParser();
p.addRequired('ROIs',@c_meshROI_isValid); % should be in Brainstorm-style format
p.addRequired('mesh',@c_mesh_isValid);
p.addParameter('doPlotMesh',true,@islogical);
p.addParameter('plotMeshArgs',{},@iscell);
p.addParameter('ROIAlpha',0.25,@isscalar);
p.addParameter('doLabelROIs',false,@islogical);
p.addParameter('doCustomDataCursor',true,@islogical);
p.addParameter('axis',[],@ishandle);
p.parse(varargin{:});
s = p.Results;
ROIs = s.ROIs;

if isempty(s.axis)
	s.axis = gca;
end

% validate ROIs format
assert(isfield(ROIs,'Vertices'));
assert(isfield(ROIs,'Label'));
assert(isfield(ROIs,'Color'));
assert(isfield(ROIs,'Seed')); 

%%
plotSurfaceArgs = {...
	'edgeColor','none',...
	'faceAlpha',1,...
	'view',[],...
	'axis',s.axis,...
	'renderingMode',1};

handles = [];

%%
if s.doPlotMesh
	h = c_plotSurface(s.mesh.Vertices,s.mesh.Faces,...
		plotSurfaceArgs{:},s.plotMeshArgs{:});	
	handles = cat(1,handles,h);
	hold on;
end

%% overlay ROIs
numROIs = length(ROIs);
colors = ROIColors(numROIs);
for iR = 1:numROIs
	if ~c_isFieldAndNonEmpty(ROIs(iR),'Color')
		ROIs(iR).Color = colors(iR,:);
	end
end

colors = c_struct_mapToArray(ROIs,{'Color'}); % assumes all colors are in same format
colorIsScalar = size(colors,2)==1;
if colorIsScalar
	defaultColor = NaN;
else
	defaultColor = [0.7 0.7 0.9];
end

roiCData = repmat(defaultColor,size(s.mesh.Vertices,1),1);
roiAlpha = zeros(size(s.mesh.Vertices,1),1);
% assume that no one node belongs to more than 1 ROI
for iR=1:numROIs
	roiNodeIndices = ROIs(iR).Vertices;
	roiCData(roiNodeIndices,:) = repmat(ROIs(iR).Color,length(roiNodeIndices),1);
	roiAlpha(roiNodeIndices) = s.ROIAlpha;
end

h = c_plotSurface(s.mesh.Vertices,s.mesh.Faces,...
	'nodeData',roiCData,...
	plotSurfaceArgs{:},...
	'faceoffsetbias',-0.0002,...
	'faceAlpha',roiAlpha);
handles = cat(1,handles,h);

if s.doLabelROIs
	coords = c_struct_mapToArray(ROIs,{'Seed'});
	keyboard %TODO: verify dimensions of coords generated by prev line work as expected
	globalCenter = mean(extrema(s.mesh.Vertices),2)';
	centeredCoords = bsxfun(@minus,coords,globalCenter);
	inflatedCenteredCoords = centeredCoords*1.5;
	inflatedCoords = bsxfun(@plus,inflatedCenteredCoords,globalCenter);
	scatter3(s.axis,coords(:,1),coords(:,2),coords(:,3));
	for r=1:numROIs
		hl = line(...
			[inflatedCoords(r,1) coords(r,1)],...
			[inflatedCoords(r,2) coords(r,2)],...
			[inflatedCoords(r,3) coords(r,3)],...
			'LineWidth',2,...
			'Parent',s.axis,...
			'Color',[0 0 0]);
% 			arrow(...
% 				'Start',inflatedCoords(r,:),...
% 				'Stop',coords(r,:));
		ht = text(inflatedCoords(r,1),inflatedCoords(r,2),inflatedCoords(r,3),...
			strrep(ROIs(r).Label,'_','\_'),... % with underscores escaped
			'BackgroundColor',[1 1 1]*0.9,...
			'Parent',s.axis,...
			'HorizontalAlignment','center');
		handles = cat(1,handles,hl,ht);
	end
end

if s.doCustomDataCursor
	dcmObj = datacursormode(s.axis.Parent);
	dcmObj.UpdateFcn = @(~,e) dcUpdateFcn(s.mesh,s.ROIs,e);
end

end

function str = dcUpdateFcn(mesh,ROIs,event)
	pos = event.Position;
	str = c_toString(pos);
	index = c_pts_findIndexClosestToPt(mesh.Vertices,pos);
	if ~isempty(index)
		str = sprintf('%s\nMesh node index: %d',str,index);	
		for iR = 1:length(ROIs)
			if ismember(index,ROIs(iR).Vertices)
				str = sprintf('%s\nIn ROI ''%s''',str,ROIs(iR).Label);
			end
		end
	end	
end

function cmap = ROIColors(num)
	%adapted from eConnectome 
	if num < 1
		return;
	end
	basecolors = zeros(7,3);
	basecolors(1,:) = [0.0, 0.5, 0.0];
	basecolors(2,:) = [0, 0.6, 0.9];
	basecolors(3,:) = [0.6, 0.42, 0.56];
	basecolors(4,:) = [0.7, 0.5, 0.2];
	basecolors(5,:) = [0.5, 0.5, 1.0];
	basecolors(6,:) = [0.1, 0.9, 0.1];
	basecolors(7,:) = [0.9, 0.4, 0.2];

	% repeat the 7 colors
	cmap = zeros(num,3);
	for i = 1:num
		j = mod(i,7);
		if j == 0
			j = 7;
		end
		cmap(i,:) = basecolors(j,:);
	end
end
